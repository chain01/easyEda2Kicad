import re
import logging


logger = logging.getLogger("KICONV")


TEMPLATE_LIB_HEADER = """\
EESchema-LIBRARY Version 2.4
# encoding utf-8
# This file is automatically generated.
"""
TEMPLATE_LIB_FOOTER = "\n".join(["\n#", "# End Library\n"])


class SchematicExist(Exception):
    pass


class SchematicManager:

    def __init__(self, path):
        self.path = path
        self.db = []
        self.alias = {}
        self._db_builded = False

    def check_db(self):
        if not self._db_builded:
            self.build_schematic_db()

    def build_schematic_db(self, rebuild=False):
        if self._db_builded and not rebuild:
            logger.info(
                "Schematic Manager: [DB_BUILD] Schematic DB already build, skip."
            )
            return

        last_def = None
        with open(self.path) as fp:
            for line in fp:
                line = line.strip()
                if line == "" or line[0] == "#":
                    continue

                # find def name
                if line[:3] == 'DEF':
                    last_def = line.split(' ')[1]
                    self.db.append(last_def)

                elif line[:5] == 'ALIAS':
                    als = line.split(' ')[1:]
                    for ali in als:
                        self.alias[ali] = last_def

        self._db_builded = True

    def get_schematic(self, schematic_title):
        self.check_db()

        if schematic_title in self.db:
            return True

        if schematic_title in self.alias:
            return self.alias[schematic_title]

        return False

    def add_schematic(
        self,
        schematic_title,
        schematic_data,
        update=False,
        auto_alias_rename=True
    ):
        db_sch = self.get_schematic(schematic_title)

        if db_sch:
            if isinstance(db_sch, bool):
                logger.warn("Schematic Manager: [ADD_SCH] {schematic_title} already in DB.")
                raise SchematicExist()

            logger.warn("Schematic Manager: [ADD_SCH] {schematic_title} has alias with {db_sch}.")

            new_schematic_title = schematic_title + "-LC"
            logger.warn("Schematic Manager: [ADD_SCH] Auto Rename Schematic to {new_schematic_title}.")
            schematic_data = schematic_data.replace(
                f'DEF "{schematic_title}"',
                f'DEF "{new_schematic_title}"'
            )
            schematic_data = schematic_data.replace(
                f'# {schematic_title}',
                f'# {new_schematic_title}'
            )
        


def update_library(library_name, component_title, template_lib_component, output_dir):
    """
    if component is already in library,
    the library will be updated,
    if not already present in library,
    the component will be added at the beginning
    """

    with open(f"{output_dir}/Schematic/{library_name}.lib", 'rb+') as lib_file:
        pattern = f".#.# {component_title}.*?ENDDEF"
        file_content = lib_file.read().decode()

        # if component already in library, update the library,
        # if not, append at the end of the library
        if f"DEF {component_title}" in file_content:
            # use regex to find the old component template in the file and replace it with the new one
            logging.info(f'found component in {library_name}, updating {library_name}')
            sub = re.sub(pattern= pattern, repl= template_lib_component, string= file_content, flags = re.DOTALL, count= 1)
            lib_file.seek(0)
            # delete the file content and rewrite it
            lib_file.truncate()
            lib_file.write(sub.encode())
        else :
            # move before the library footer and write the component template
            logging.info(f"component not found in {library_name}, adding the component ...")
            lib_file.seek(-len(template_lib_footer),2)
            lib_file.truncate()
            lib_file.write(template_lib_component.encode())
            lib_file.write(template_lib_footer.encode())

