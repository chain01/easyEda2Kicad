import logging


logger = logging.getLogger("KICONV")


TEMPLATE_LIB_HEADER = """\
EESchema-LIBRARY Version 2.4
#encoding utf-8
# This file is automatically generated.
"""
TEMPLATE_LIB_FOOTER = b"#\n#End Library\n"


class SchematicExist(Exception):
    pass


class SchematicNotFound(Exception):
    pass


class SchematicManager:

    def __init__(self, path):
        self.path = path
        self.db = []
        self.alias = {}
        self._db_builded = False

    def check_db(self):
        if not self._db_builded:
            self.build_schematic_db()

    def build_schematic_db(self, rebuild=False):
        if self._db_builded and not rebuild:
            logger.info(
                "Schematic Manager: [DB_BUILD] Schematic DB already build, skip."
            )
            return

        last_def = None
        with open(self.path) as fp:
            for line in fp:
                line = line.strip()
                if line == "" or line[0] == "#":
                    continue

                # find def name
                if line[:3] == 'DEF':
                    last_def = line.split(' ')[1]
                    self.db.append(last_def)

                elif line[:5] == 'ALIAS':
                    als = line.split(' ')[1:]
                    for ali in als:
                        self.alias[ali] = last_def

        self._db_builded = True

    def get_schematic(self, schematic_title):
        self.check_db()

        if schematic_title in self.db:
            return True

        if schematic_title in self.alias:
            return self.alias[schematic_title]

        return False

    def update_schematic(self, schematic_title, schematic_data):
        sch_find = False
        start_pos = 0
        sch_magic = f"DEF {schematic_title} ".encode()

        with open(self.path, 'rb+') as fp:
            for line in fp:
                if line.startswith(sch_magic):
                    sch_find = True
                    logger.debug(
                        "Schematic Manager: Find Sch at C-pos %s. Line Size: %s",
                        fp.tell(),
                        len(line)
                    )

                    fp.seek(-len(line), 1)
                    start_pos = fp.tell()
                    logger.debug(
                        f"Schematic Manager: Sch S-pos at %s.",
                        start_pos
                    )
                    break

            # buffer remind ctx
            if not sch_find:
                logger.critical("Schematic Manager: Unable to update schematic, schematic not find.")
                raise SchematicNotFound()

            buffer = None

            while True:
                line = fp.readline()
                if line == b"ENDDEF\n":
                    buffer = fp.read()
                    break

            fp.seek(start_pos, 0)
            fp.truncate()
            fp.write(schematic_data.replace(f"#\n# {schematic_title}\n#\n", "").encode())
            fp.write(b'\n')
            fp.write(buffer)

    def add_schematic(
        self,
        schematic_title,
        schematic_data,
        update=False,
        auto_alias_rename=True
    ):
        logger.info("Schematic Manager: Add Schematic %s.", schematic_title)
        db_sch = self.get_schematic(schematic_title)

        if db_sch:
            if isinstance(db_sch, bool):
                if not update:
                    logger.warning(
                        "Schematic Manager: [ADD_SCH] %s already in DB.",
                        schematic_title
                    )
                    raise SchematicExist()
                return self.update_schematic(schematic_title, schematic_data)
            else:
                logger.warning(
                    "Schematic Manager: [ADD_SCH] %s has alias with %s.",
                    schematic_title,
                    db_sch
                )

                new_schematic_title = schematic_title + "-LC"
                logger.warning(
                    "Schematic Manager: [ADD_SCH] Auto Rename Schematic to %s.",
                    new_schematic_title
                )
                schematic_data = schematic_data.replace(
                    f'DEF "{schematic_title}"',
                    f'DEF "{new_schematic_title}"'
                )
                schematic_data = schematic_data.replace(
                    f'# {schematic_title}',
                    f'# {new_schematic_title}'
                )
                schematic_title = new_schematic_title

        with open(self.path, 'rb+') as fp:
            fp.seek(-len(TEMPLATE_LIB_FOOTER), 2)
            fp.truncate()
            fp.write(schematic_data.encode())
            fp.write(b'\n')
            fp.write(TEMPLATE_LIB_FOOTER)

        logger.info("Schematic Manager: Schematic %s Added.", schematic_title)
